<?php
/**
 * @file
 * Main module file for the Render Cache caching system.
 */

// Include Drupal 8 render helper functions.
require_once __DIR__ . '/includes/drupal_render_8.inc';

// -----------------------------------------------------------------------
// Core Hooks

/**
 * Implements hook_flush_caches().
 */
function render_cache_flush_caches() {
  return array('cache_render');
}

// -----------------------------------------------------------------------
// Contrib Hooks

/**
 * Implements hook_ctools_plugin_type().
 */
function render_cache_ctools_plugin_type() {
  $items['Controller'] = array(
    'cache' => FALSE,
    'classes' => array('class'),
  );
  $items['ValidationStrategy'] = array(
    'cache' => FALSE,
    'classes' => array('class'),
  );
  $items['RenderStrategy'] = array(
    'cache' => FALSE,
    'classes' => array('class'),
  );
  $items['ServiceProvider'] = array(
    'cache' => FALSE,
    'classes' => array('class'),
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 * @param string $plugin_type
 *
 * @return null|string
 */
function render_cache_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'render_cache') {
    return 'src/RenderCache/' . $plugin_type;
  }

  return NULL;
}

// -----------------------------------------------------------------------
// Public API

/**
 * Returns a render cache controller.
 *
 * @param string $type
 *
 * @return \Drupal\render_cache\RenderCache\Controller\ControllerInterface
 */
function render_cache_get_controller($type) {
  return render_cache_get_plugin_handler('Controller', $type);
}

/**
 * Returns a render cache validation strategy plugin.
 *
 * @param string $type
 *
 * @return \Drupal\render_cache\RenderCache\ValidationStrategy\ValidationStrategyInterface
 */
function render_cache_get_validator($type) {
  return render_cache_get_plugin_handler('ValidationStrategy', $type);
}

/**
 * Returns a render cache render strategy plugin.
 *
 * @param string $type
 *   The type of the plugin, e.g. "esi_validate", "esi", "ajax2,
 *   "ajax_lstorage", ...
 *
 * @return \Drupal\render_cache\RenderCache\RenderStrategy\RenderStrategyInterface
 */
function render_cache_get_renderer($type) {
  return render_cache_get_plugin_handler('RenderStrategy', $type);
}

/**
 * Returns a render cache service plugin.
 *
 * @param string $type
 *   The type of the service
 *
 * @return \Drupal\render_cache\RenderCache\ServiceProvider\ServiceProviderInterface
 */
function render_cache_get_service_provider($type) {
  return render_cache_get_plugin_handler('ServiceProvider', $type);
}

/**
 * Check if this call should / can be served from the cache.
 *
 * By default only GET and / or HEAD requests are cacheable.
 *
 * @param bool $allow_caching
 *   Set to FALSE if you want to prevent this call to get the cached version and
 *   / or fill the cache.
  * @param bool $ignore_request_method_check
 *   Set to TRUE if you want to ignore the request method check.
 *
 * @return bool
 *   TRUE if the current call can be cached, FALSE otherwise.
 *
 * @see drupal_page_is_cacheable()
 */
function render_cache_call_is_cacheable($allow_caching = NULL, $ignore_request_method_check = FALSE) {
  $allow_caching_static = &drupal_static(__FUNCTION__, TRUE);
  if (isset($allow_caching)) {
    $allow_caching_static = $allow_caching;
  }

  return $allow_caching_static
    && ($ignore_request_method_check
      || ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'HEAD'))
    && !drupal_is_cli();
}

// -----------------------------------------------------------------------
// Helper functions

/**
 * Fetch the correct plugin for type with the given plugin_type.
 *
 * @param string $type
 * @param string $plugin_type
 * @return array
 *   A CTools plugin array.
 */
function render_cache_get_plugin($plugin_type, $type) {
  ctools_include('plugins');
  return ctools_get_plugins('render_cache', $plugin_type, $type);
}

/**
 * Fetch all RenderCache plugins of the given plugin type.
 *
 * @param string $plugin_type
 *
 * @return array
 *   An array of RenderCache plugin arrays.
 */
function render_cache_get_plugins($plugin_type) {
  ctools_include('plugins');
  return ctools_get_plugins('render_cache', $plugin_type);
}

/**
 * Returns a render cache plugin for the given type and plugin_type.
 *
 * If a plugin does not define a class at all, then the default class.
 *
 * @param string $plugin_type
 *   The plugin type to load, 'Controller' or 'Validator' are valid.
 * @param string $type
 *   The type of plugin to load.
 *
 * @return \Drupal\render_cache\Plugin\PluginInterface|FALSE
 *   Either the instantiated handler or FALSE if one could not be had.
 */
function render_cache_get_plugin_handler($plugin_type, $type) {
  $full_cache = &drupal_static(__FUNCTION__, array());
  $full_cache += array(
    $plugin_type => array(),
  );
  $cache = &$full_cache[$plugin_type];

  $plugin = render_cache_get_plugin($plugin_type, $type);
  if (!$plugin) {
    return FALSE;
  }

  // Get the class name from the 'class' property if we have not already
  // cached a handler.
  if (empty($cache[$plugin['name']]) && ($class = ctools_plugin_get_class($plugin, 'class'))) {
    $cache[$plugin['name']] = new $class($plugin);
  }
  return !empty($cache[$plugin['name']]) ? $cache[$plugin['name']] : FALSE;
}

/**
 * Overrides drupal_render().
 *
 * If we really need to render early, at least collect the cache tags, etc.
 *
 * @param array $render
 *
 * @return string
 */
function render_cache_drupal_render(&$render) {
  return RenderCache::drupalRender($render);
}

/**
 * Returns default values for cache info.
 *
 * @deprecated
 * @todo remove when all modules are converted.
 *
 * @return array
 */
function render_cache_cache_info_defaults() {
  // Setup defaults.
  return array(
    'bin' => 'cache_render',
    'expire' => CACHE_PERMANENT,
    'granularity' => DRUPAL_CACHE_PER_ROLE, // Use per role to support contextual and its safer anyway.
    'keys' => array(),
    // Special keys that are only related to our implementation.
    'render_cache_render_to_markup' => FALSE,
  );
}
