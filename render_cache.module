<?php
/**
 * @file
 * Main module file for the Render Cache caching system.
 */

// -----------------------------------------------------------------------
// Contrib Hooks

/**
 * Implements hook_ctools_plugin_type().
 */
function render_cache_ctools_plugin_type() {
  $items['controller'] = array(
    'cache' => FALSE,
    'classes' => array('class'),
  );
  $items['validator'] = array(
    'cache' => FALSE,
    'classes' => array('class'),
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function render_cache_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'render_cache') {
    return 'plugins/render_cache/' . $plugin_type;
  }
}

// -----------------------------------------------------------------------
// Public API

/**
 * Returns a render cache controller.
 */
function render_cache_get_controller($type) {
  return render_cache_get_plugin_handler('controller', $type);
}

/**
 * Returns a render cache validation strategy plugin.
 */
function render_cache_get_validator($type) {
  return render_cache_get_plugin_handler('validator', $type);
}

// -----------------------------------------------------------------------
// Helper functions

/**
 * Fetch the correct plugin for type with the given plugin_type.
 *
 * @param string $type
 * @param string $plugin_type
 * @return array
 *   A CTools plugin array.
 */
function render_cache_get_plugin($plugin_type, $type) {
  ctools_include('plugins');
  return ctools_get_plugins('render_cache', $plugin_type, $type);
}

/**
 * Fetch all RenderCache plugins of the given plugin type.
 *
 * @return array
 *   An array of RenderCache plugin arrays.
 */
function render_cache_get_plugins($plugin_type) {
  ctools_include('plugins');
  return ctools_get_plugins('render_cache', $plugin_type);
}

/**
 * Returns a render cache plugin for the given type and plugin_type.
 *
 * If a plugin does not define a class at all, then the default class.
 *
 * @param string $plugin_type
 *   The plugin type to load, 'controller' or 'validator' are valid.
 * @param string $type
 *   The type of plugin to load.
 *
 * @return RenderCacheControllerInterface or RenderCacheValidationStrategyInterface
 *   Either the instantiated handler or FALSE if one could not be had.
 */
function render_cache_get_plugin_handler($plugin_type, $type) {
  $full_cache = &drupal_static(__FUNCTION__, array());
  $full_cache += array(
    $plugin_type => array(),
  );
  $cache = &$full_cache[$plugin_type];

  $plugin = render_cache_get_plugin($plugin_type, $type);
  if (!$plugin) {
    return FALSE;
  }

  // Get the class name from the 'class' property if we have not already
  // cached a handler.
  if (empty($cache[$plugin['name']]) && ($class = ctools_plugin_get_class($plugin, 'class'))) {
    $cache[$plugin['name']] = new $class($plugin);
  }
  return !empty($cache[$plugin['name']]) ? $cache[$plugin['name']] : FALSE;
}
