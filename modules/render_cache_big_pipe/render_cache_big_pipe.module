<?php

/**
 * @file
 * Hook implementations and frequently used functions for render cache big pipe module.
 */

// -----------------------------------------------------------------------
// Core Hooks


/**
 * Implements hook_theme().
 */
function render_cache_big_pipe_theme() {
  return array(
    'html_top' => array(
      'render element' => 'page',
      'template' => 'html-top',
    ),
    'html_bottom' => array(
      'variables' => array( 'scripts' => '' ),
      'template' => 'html-bottom',
    ),
  );
}

// -----------------------------------------------------------------------
// Contrib Hooks

/**
 * Implements hook_ctools_plugin_directory().
 */
function render_cache_big_pipe_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'render_cache') {
    return 'plugins/render_cache/' . $plugin_type;
  }
}

function render_cache_big_pipe_render_cache_page_pre_render_alter(&$build) {
  if (!class_exists('RenderCacheRenderStrategyBigPipe')) {
    return;
  }
  $placeholders = RenderCacheRenderStrategyBigPipe::getPlaceholders();

  if (empty($placeholders)) {
    return;
  }

  // Store for later usage.
  $build['#render_cache_big_pipe_placeholders'] = $placeholders;

  // Replace HTML with just the html_top part.
  foreach ($build['page']['#theme_wrappers'] as $key => $theme_wrapper) {
    if ($theme_wrapper == 'html') {
      $build['page']['#theme_wrappers'][$key] = 'html_top';
    }
  }
}

function render_cache_big_pipe_render_cache_page_post_render_alter(&$markup, $build) {
  if (empty($build['#render_cache_big_pipe_placeholders'])) {
    return;
  }

  // Immediately output things so far.
  ob_flush();
  flush();

  $rcs = render_cache_get_renderer('big_pipe');

  // Replace the placeholders.
  foreach ($build['#render_cache_big_pipe_placeholders'] as $placeholder => $ph_object) {
    // Check if the placeholder is present at all.
    if (strpos($markup, $placeholder) === FALSE) {
      continue;
    }

    print $rcs->renderPlaceholder($placeholder, $ph_object);

    // Immediately output things so far.
    ob_flush();
    flush();
  }
  // Now render the scripts and closing body tag.
  $bottom = array(
    '#theme' => 'html_bottom',
  );
  print drupal_render($bottom);
}

// -----------------------------------------------------------------------
// Theme API

/**
 * Overrides template_preprocess_html().
 *
 * Moves the scripts to the bottom.
 */
function template_preprocess_html_top(&$variables) {
  // @todo Call all preprocess functions for the html hook.
  template_preprocess_html($variables);

 // Populate the page template suggestions.
  if ($suggestions = theme_get_suggestions(arg(), 'html-top')) {
    $variables['theme_hook_suggestions'] = $suggestions;
  }
}

/**
 * Overrides template_process_html().
 *
 * Moves the scripts to the bottom.
 */
function template_process_html_top(&$variables) {
  // Render page_top and page_bottom into top level variables.
  $variables['page_top'] = drupal_render($variables['page']['page_top']);
  $variables['page_bottom'] = drupal_render($variables['page']['page_bottom']);
  // Place the rendered HTML for the page body into a top level variable.
  $variables['page'] = $variables['page']['#children'];
  $variables['page_bottom'] .= drupal_get_js('footer');

  $variables['head'] = drupal_get_html_head();
  $variables['css'] = drupal_add_css();
  $variables['styles'] = drupal_get_css();
  $variables['scripts'] = '';
}

function template_process_html_bottom(&$variables) {
  $variables['scripts'] = drupal_get_js();
}

// -----------------------------------------------------------------------
// Public API
