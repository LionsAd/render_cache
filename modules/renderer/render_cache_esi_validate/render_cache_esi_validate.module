<?php

/**
 * @file
 * Hook implementations and frequently used functions for render cache esi module.
 */

// -----------------------------------------------------------------------
// Core Hooks

/**
 * Implements hook_menu().
 */
function render_cache_esi_validate_menu() {
  $items = array();

  $items['render-cache/esi-validate-session'] = array(
    'page callback' => 'render_cache_esi_validate_session_render',
    'access callback' => TRUE,
    'delivery callback' => 'render_cache_esi_validate_session_deliver',
    'type' => MENU_CALLBACK,
  );
  $items['render-cache/esi-validate-page'] = array(
    'page callback' => 'render_cache_esi_validate_page_render',
    'access callback' => 'render_cache_esi_validate_page_access',
    'delivery callback' => 'render_cache_esi_validate_session_deliver',
    'type' => MENU_CALLBACK,
  );
  $items['render-cache/esi-validate-render'] = array(
    'page callback' => 'render_cache_esi_validate_render',
    'access callback' => 'render_cache_esi_validate_access',
    'delivery callback' => 'render_cache_esi_validate_deliver',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

// -----------------------------------------------------------------------
// Contrib Hooks

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 * @param string $plugin_type
 *
 * @return null|string
 */
function render_cache_esi_validate_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'render_cache') {
    return 'src/Plugin/RenderCache/' . $plugin_type;
  }

  return NULL;
}

/**
 * Implements hook_render_cache_page_cid_alter().
 *
 * @param string[] $cid_parts
 * @param array $cache_info
 * @param object $object
 * @param array $context
 */
function render_cache_esi_validate_render_cache_page_cid_alter(&$cid_parts, $cache_info, $object, $context) {
  // Unset the hash, not possible with ESI.
  array_pop($cid_parts);
}

// -----------------------------------------------------------------------
// Public API

/**
 * @return bool
 */
function render_cache_esi_validate_access() {
  if (empty($_REQUEST['cid'])
    || empty($_REQUEST['bin'])
    || empty($_SERVER['HTTP_X_DRUPAL_UID'])
    || empty($_SERVER['HTTP_X_DRUPAL_ROLES'])
    || empty($_SERVER['HTTP_X_DRUPAL_THEME'])
    || !user_is_logged_in()
    || empty($_SERVER['HTTP_X_DRUPAL_ESI_VALIDATE'])
    ) {
    return FALSE;
  }

  $uid = $_SERVER['HTTP_X_DRUPAL_UID'];
  if ($GLOBALS['user']->uid != $uid) {
    return FALSE;
  }

  return TRUE;
}

/**
 * @return string
 */
function render_cache_esi_validate_miss() {
  // A cache miss is a pretty bad situation, though it should never happen
  // as we just validated the cache.
  // Because varnish does not let us restart the parent request, we need to return
  // a script to reload the page with a special header.
  $script =<<<EOF
<script type="text/javascript">
  document.location.href=document.location.href + '&no-esi=1';
</script>

EOF;

  return $script;
}

/**
 * @return string
 */
function render_cache_esi_validate_render() {
  $cid = $_REQUEST['cid'];
  $bin = $_REQUEST['bin'];

  // @todo Allow to check parent cache entry instead,
  //       which allows graceful fallback and use placeholder
  //       here as callback key?

  // Replace dynamic cache IDs.
  // @todo Use helper function.
  $cid = str_replace('%user', $GLOBALS['user']->uid, $cid);
  $cache = cache_get($cid, $bin);

  if (empty($cache->data)) {
    return render_cache_esi_validate_miss();
  }
  // @todo Calculate cache header info from 'ttl' and 'age' in #cache.
  $render = $cache->data;

  // Cache for 10 min, if not said otherwise.
  $ttl = 600;

  drupal_add_http_header('Cache-Control', 'public, max-age: ' . $ttl);

  // Send Akamai header just for future proofness.
  drupal_add_http_header('Edge-Control', 'max-age: ' . $ttl);


  return drupal_render($render);
}

/**
 * @param mixed $page_callback_result
 */
function render_cache_esi_validate_deliver($page_callback_result) {
  if (is_int($page_callback_result)) {
    drupal_deliver_html_page($page_callback_result);
    return;
  }

  // Copied code from drupal_deliver_html_page:

  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  }

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  if (isset($page_callback_result)) {
    // Print anything besides a menu constant, assuming it's not NULL or
    // undefined.
    print $page_callback_result;
  }
}

// -----------------------------------------------------------------------
// Session functions

function render_cache_esi_validate_session_render() {
  global $user, $theme;

  if (!user_is_logged_in()) {
    return MENU_ACCESS_DENIED;
  }

  // @todo Unused variable $roles (overwritten few lines below)
  $roles = implode(',', $user->roles);

  // No ESI for admins, etc.
  // @todo Make configurable.
  $roles = implode(', ', array_keys($user->roles));
  if ($roles != '2') {
    return MENU_ACCESS_DENIED;
  }

  // Cache the session response for 8 hours by default.
  $ttl = variable_get('render_cache_esi_validate_session_ttl', 8 * 60 * 60);
  drupal_add_http_header('Cache-Control', 'public, max-age: ' . $ttl);

  // Send Akamai header just for future proofness.
  drupal_add_http_header('Edge-Control', 'max-age: ' . $ttl);

  // Send the roles header, varnish will store this request
  // based on the SSESSID hash, so we have a handy SSESSID
  // => uid,roles mapping.
  drupal_add_http_header('X-Drupal-Uid', $user->uid);
  drupal_add_http_header('X-Drupal-Roles', $roles);
  drupal_add_http_header('X-Drupal-Theme', $theme);

  return NULL;
}

function render_cache_esi_validate_session_deliver($page_callback_result) {
  if ($page_callback_result == MENU_ACCESS_DENIED) {
    drupal_add_http_header('Status', '403 Forbidden');
  }
  else if ($page_callback_result == MENU_NOT_FOUND) {
    drupal_add_http_header('Status', '404 Not found');
  }
  else {
    drupal_add_http_header('Status', '200 OK');
    if (isset($page_callback_result)) {
      // Print anything besides a menu constant, assuming it's not NULL or
      // undefined.
      print $page_callback_result;
    }
  }
}

// -----------------------------------------------------------------------
// Page validation function.

/**
 * @return bool
 */
function render_cache_esi_validate_page_access() {
  if (empty($_SERVER['HTTP_X_DRUPAL_ROLES'])
    || empty($_SERVER['HTTP_X_DRUPAL_UID'])
    || empty($_SERVER['HTTP_X_DRUPAL_THEME'])
    || !user_is_logged_in()
    || empty($_SERVER['HTTP_X_DRUPAL_TRY_ESI_VALIDATE'])
    || empty($_SERVER['HTTP_X_DRUPAL_REQUEST_URL'])
  ) {
    return FALSE;
  }

  $uid = $_SERVER['HTTP_X_DRUPAL_UID'];
  if ($GLOBALS['user']->uid != $uid) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Returns whether the page can be taken from the cache.
 *
 * Or whether it should be pass()'ed.
 *
 * @return int|null
 *   - MENU_NOT_FOUND when the cache could not be validated
 *     and a fresh copy needs to be used.
 *   - NULL otherwise.
 */
function render_cache_esi_validate_page_render() {
  global $base_root;

  // This does not use more than neccessary Drupal variables
  // to be easier portable to pre-bootstrap script.
  $request_url = $_SERVER['HTTP_X_DRUPAL_REQUEST_URL'];

  $page = $base_root . $request_url;
  $roles = $_SERVER['HTTP_X_DRUPAL_ROLES'];
  $theme = $_SERVER['HTTP_X_DRUPAL_THEME'];

  // @todo Do not hardcode and use special ESI bucket for this
  //       that has all placeholder cache tags as well.
  $cid = 'render_cache:page:drupal_deliver_html_page:' . $theme . ':r.' . $roles . ':' . $page;

  // @todo do not hardcode.
  $cache = cache_get($cid, 'cache_render');

  if (empty($cache->data)) {
    return MENU_NOT_FOUND;
  }

  $page = $cache->data;

  if (empty($page['#render_cache_placeholders']['esi_validate'])) {
    // Everything is okay, if we don't have any placeholders.
    // Page can come from cache.
    return NULL;
  }

  // @todo Validate cache tags here.

  $placeholders = $page['#render_cache_placeholders'];
  $cids = array();
  foreach ($placeholders as $placeholder) {
    // If cid empty or we are not responsible, just continue.
    if (empty($placeholder['cache_info']['cid'])
      || !in_array('esi_validate', $placeholder['render_strategy'])) {
      continue;
    }
    $cids[$placeholder['cache_info']['bin']][] = $placeholder['cache_info']['cid'];
  }

  // @todo Undefined variable $cid_bins
  foreach ($cid_bins as $bin => $cids) {

    // @todo Unused variable $objects
    $objects = cache_get_multiple($cids, $bin);

    // If we get a cache miss, $cids will be populated and we return 404.
    if (!empty($cids)) {
      return MENU_NOT_FOUND;
    }

    // @todo Validate cache tags here.
  }

  // This can be coming from cache, the cache is ready for retrieval.
  return NULL;
}
